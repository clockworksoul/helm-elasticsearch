{{- if eq .Values.common.stateful.enabled "true" }}
apiVersion: apps/v1beta1
kind: StatefulSet
{{- else }}
apiVersion: extensions/v1beta1
kind: Deployment
{{- end }}
metadata:
  name: {{ template "fullname" . }}-data
  labels:
    component: {{ template "fullname" . }}
    role: data
spec:
{{- if eq .Values.common.stateful.enabled "true" }}
  serviceName: {{ template "fullname" . }}-data
{{- end }}
  replicas: {{ .Values.data.replicas }}
  template:
    metadata:
      labels:
        component: {{ template "fullname" . }}
        role: data
      annotations:
        # Elasticsearch uses a hybrid mmapfs / niofs directory by default to
        # store its indices. The default operating system limits on mmap counts
        # is likely to be too low, which may result in out of memory exceptions,
        # so we use vm.max_map_count=262144 to increase that value.
        pod.beta.kubernetes.io/init-containers: '[
          {
          "name": "sysctl",
            "image": "busybox",
            "imagePullPolicy": "IfNotPresent",
            "command": ["sysctl", "-w", "vm.max_map_count=262144"],
            "securityContext": {
              "privileged": true
            }
          }
        ]'
    spec:
    {{- if eq .Values.data.antiAffinity "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  component: {{ template "fullname" . }}
                  role: data
      {{- else if eq .Values.data.antiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  component: {{ template "fullname" . }}
                  role: data
      {{- end }}
      containers:
      - name: es-data
        securityContext:
          privileged: false
          capabilities:
            add:
              - IPC_LOCK
              - SYS_RESOURCE
        image: "{{ .Values.common.image.repository }}:{{ .Values.common.image.tag }}"
        imagePullPolicy: {{ .Values.common.image.pullPolicy }}
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: DISCOVERY_SERVICE
          value: {{ template "fullname" . }}-discovery
        {{- range $key, $value :=  .Values.common.env }}
        - name: {{ $key | upper | replace "-" "_" }}
          value: {{ $value | quote }}
        {{- end }}
        {{- range $key, $value :=  .Values.data.env }}
        - name: {{ $key | upper | replace "-" "_" }}
          value: {{ $value | quote }}
        {{- end }}
        ports:
        - containerPort: 9300
          name: transport
          protocol: TCP
        volumeMounts:
        - name: storage
          mountPath: /data
{{- if ne .Values.common.stateful.enabled "true" }}
      volumes:
        - emptyDir:
            medium: ""
          name: "storage"
{{- else }}
  volumeClaimTemplates:
  - metadata:
      name: storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: default
      resources:
        requests:
          storage: {{ .Values.common.stateful.pv_size_data }}
{{- end }}
